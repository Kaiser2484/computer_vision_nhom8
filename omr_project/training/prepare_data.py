import cv2
import numpy as np
import pandas as pd
import os
from tqdm import tqdm

# --- 1. C·∫§U H√åNH ƒê∆Ø·ªúNG D·∫™N ---
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__)) 
# Gi·∫£ s·ª≠ c·∫•u tr√∫c l√†: training/Dataset/train/train_001.jpg
RAW_DATA_DIR = os.path.join(SCRIPT_DIR, 'Dataset')
PROCESSED_DATA_DIR = os.path.join(SCRIPT_DIR, 'processed_data')
LABEL_FILES = {
    'train': os.path.join(SCRIPT_DIR, 'train_labels.csv'),
    'valid': os.path.join(SCRIPT_DIR, 'valid_labels.csv')
}
# -----------------------------------------------------

# --- 2. C·∫§U H√åNH LAYOUT (C·ª¶A B·∫†N) ---
WARPED_IMAGE_WIDTH = 793 
WARPED_IMAGE_HEIGHT = 1122 
START_X_COL_1 = 138
START_X_COL_2 = 290
START_X_COL_3 = 444
START_X_COL_4 = 598
START_Y_ROWS = 466
OPTION_X_SPACING = 20
QUESTION_Y_SPACING = 38
BUBBLE_W = 20 
BUBBLE_H = 20

NUM_QUESTIONS = 60
NUM_OPTIONS = 4 
QUESTIONS_PER_COLUMN = 15 
OPTIONS_MAP = {0: 'A', 1: 'B', 2: 'C', 3: 'D'}
# -----------------------------------------------------


def get_bubble_coordinates(q_num, opt_idx):
    """T√≠nh t·ªça ƒë·ªô (x, y) c·ªßa 1 √¥ bong b√≥ng"""
    col_idx = q_num // QUESTIONS_PER_COLUMN
    row_idx = q_num % QUESTIONS_PER_COLUMN
    
    if col_idx == 0: start_x = START_X_COL_1
    elif col_idx == 1: start_x = START_X_COL_2
    elif col_idx == 2: start_x = START_X_COL_3
    elif col_idx == 3: start_x = START_X_COL_4
    else:
        print(f"L·ªói: Ch·ªâ s·ªë c·ªôt kh√¥ng h·ª£p l·ªá: {col_idx} cho c√¢u {q_num}")
        return 0, 0 
        
    x = start_x + (opt_idx * OPTION_X_SPACING)
    y = START_Y_ROWS + (row_idx * QUESTION_Y_SPACING)
    
    return int(x), int(y)

def process_data(data_type, label_file_path):
    """
    H√†m ch√≠nh: ƒê·ªçc CSV, resize ·∫£nh (KH√îNG N·∫ÆN), c·∫Øt v√† l∆∞u.
    """
    print(f"\n--- B·∫Øt ƒë·∫ßu x·ª≠ l√Ω b·ªô: {data_type} ---")
    
    output_dir_0 = os.path.join(PROCESSED_DATA_DIR, data_type, '0')
    output_dir_1 = os.path.join(PROCESSED_DATA_DIR, data_type, '1')
    os.makedirs(output_dir_0, exist_ok=True)
    os.makedirs(output_dir_1, exist_ok=True)
    
    try:
        with open(label_file_path, 'r', encoding='utf-8-sig') as f:
            lines = f.readlines()
    except FileNotFoundError:
        print(f"L·ªñI: Kh√¥ng t√¨m th·∫•y file {label_file_path}. B·ªè qua...")
        return
    
    data_rows = []
    line_number = 1
    for line in lines[1:]: 
        line_number += 1
        line = line.strip()
        if not line:
            continue
        try:
            filename, answers_str = line.split(';', 1) 
            data_rows.append({'filename': filename.strip(), 'answers_string': answers_str.strip(), 'line': line_number})
        except ValueError:
            print(f"C·∫£nh b√°o (D√≤ng {line_number}): D√≤ng l·ªói ƒë·ªãnh d·∫°ng (kh√¥ng c√≥ d·∫•u ch·∫•m ph·∫©y?). B·ªè qua. D√≤ng: {line}")
            continue
            
    for index, row in enumerate(tqdm(data_rows, desc=f"X·ª≠ l√Ω {data_type}")):
        filename = row['filename']
        answers_str = row['answers_string']
        line_num = row['line']
        
        img_path = os.path.join(RAW_DATA_DIR, data_type, filename)
        if not os.path.exists(img_path):
            print(f"\nC·∫£nh b√°o (D√≤ng {line_num}): Kh√¥ng t√¨m th·∫•y file {img_path}. B·ªè qua.")
            continue
            
        image = cv2.imread(img_path)
        if image is None:
            print(f"\nC·∫£nh b√°o (D√≤ng {line_num}): Kh√¥ng th·ªÉ ƒë·ªçc file {img_path}. B·ªè qua.")
            continue
            
        # Resize ·∫£nh v·ªÅ ƒë√∫ng k√≠ch th∆∞·ªõc b·∫°n ƒë√£ ƒëo t·ªça ƒë·ªô
        try:
            resized_img = cv2.resize(image, (WARPED_IMAGE_WIDTH, WARPED_IMAGE_HEIGHT))
            warped_img = cv2.cvtColor(resized_img, cv2.COLOR_BGR2GRAY)
        except Exception as e:
            print(f"\nL·ªói khi resize ·∫£nh {filename}: {e}. B·ªè qua.")
            continue
            
        # 5. L·∫•y chu·ªói ƒë√°p √°n
        try:
            student_answers = answers_str.split(',')
            if len(student_answers) != NUM_QUESTIONS:
                 print(f"\nC·∫£nh b√°o (D√≤ng {line_num}): ·∫¢nh {filename} c√≥ {len(student_answers)} ƒë√°p √°n, mong ƒë·ª£i {NUM_QUESTIONS}. B·ªè qua.")
                 continue
        except Exception as e:
            print(f"L·ªói x·ª≠ l√Ω ƒë√°p √°n cho {filename}: {e}. B·ªè qua.")
            continue

        # 6. L·∫∑p qua t·ª´ng c√¢u h·ªèi
        for q_num in range(NUM_QUESTIONS):
            correct_answers_str = student_answers[q_num]
            correct_answers_list = correct_answers_str.split('|') 
            
            for opt_idx in range(NUM_OPTIONS):
                x, y = get_bubble_coordinates(q_num, opt_idx)
                
                # C·∫Øt ·∫£nh bong b√≥ng t·ª´ ·∫£nh ƒë√£ resize
                bubble_roi = warped_img[y:y+BUBBLE_H, x:x+BUBBLE_W]
                
                if bubble_roi.shape[0] != BUBBLE_H or bubble_roi.shape[1] != BUBBLE_W:
                    continue
                
                # Resize v·ªÅ k√≠ch th∆∞·ªõc chu·∫©n (28x28) cho model
                bubble_img = cv2.resize(bubble_roi, (28, 28))
                
                option_char = OPTIONS_MAP[opt_idx] 
                
                if option_char in correct_answers_list:
                    save_dir = output_dir_1
                else:
                    save_dir = output_dir_0
                    
                out_filename = f"{os.path.splitext(filename)[0]}_q{q_num+1}_opt{option_char}.png"
                save_path = os.path.join(save_dir, out_filename)
                cv2.imwrite(save_path, bubble_img)

    print(f"Ho√†n t·∫•t x·ª≠ l√Ω b·ªô: {data_type}!")
    
if __name__ == "__main__":
    print("B·∫Øt ƒë·∫ßu script chu·∫©n b·ªã d·ªØ li·ªáu...")
    print(f"Script ƒëang ch·∫°y t·ª´: {SCRIPT_DIR}")
    print(f"S·∫Ω ƒë·ªçc d·ªØ li·ªáu th√¥ t·ª´: {RAW_DATA_DIR}")
    print(f"S·∫Ω l∆∞u d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω v√†o: {PROCESSED_DATA_DIR}")
    
    for data_type, label_file_path in LABEL_FILES.items():
        process_data(data_type, label_file_path)
        
    print("\n--- HO√ÄN T·∫§T T·∫§T C·∫¢ --- üöÄ")
    print("B·∫°n c√≥ th·ªÉ ki·ªÉm tra c√°c th∆∞ m·ª•c sau:")
    print(f"- {PROCESSED_DATA_DIR}/train/0")
    print(f"- {PROCESSED_DATA_DIR}/train/1")
    print(f"- {PROCESSED_DATA_DIR}/valid/0")
    print(f"- {PROCESSED_DATA_DIR}/valid/1")